import re
import sys

getting_started_intro = """
This section provides a short tutorial that covers the basics of using
Bodo and explains its important concepts.
"""


user_guide_intro = """
The previous section covered the basics of using Bodo.
In this section, we will explain core Bodo concepts in more detail, introduce
additional Bodo features and discuss more advanced topics.
"""


px_regexp = re.compile("\s*%%px")
section_header_regexp = re.compile("^[=\-~]+\s*$")


def is_section_header(l):
    """ Return true if the line passed is a rst section header """
    return section_header_regexp.match(l) is not None


def process_html_block(l, infile, outfile):
    """Process `.. raw:: html` blocks in the rst file. This must be called
    when such a block is reached. It will then check if the block contains
    <div class="alert alert-block .../> blocks that are used in the notebook
    and substitute them with the equivalent native rst ones"""
    block = []
    assert l.startswith(".. raw:: html")
    block.append(l)
    while True:
        l = infile.readline()
        if len(l) > 0 and l[0] not in (" ", "\t", "\n"):
            # found non-indented text, so no longer in block
            break
        else:
            block.append(l)
        if """<div class="alert alert-block""" in l:
            # replace block generated by nbconvert with our own
            remove = ["<b>Warning:</b>", "<b>Important:</b>", "<b>Note:</b>"]
            if "alert-warning" in l:  # yellow/orange in notebook
                block = [".. warning::\n", "\n"]
            elif "alert-danger" in l:  # red in notebook
                block = [".. danger::\n", "\n"]
            elif "alert-info" in l:  # blue in notebook
                block = [".. note::\n", "\n"]
            l = infile.readline()
            while "</div>" not in l:
                for substr in remove:
                    l = l.replace(substr, "", 1)
                block.append(l)
                l = infile.readline()
            l = "\n"
            break
    for l_out in block:
        outfile.write(l_out)
    return l


def process(infile_name, outfile_name):
    """Process the rst file generated with nbconvert to do:
    - minor content adjustment to beginning
    - remove "Environment setup" sections
    - Remove %%px magic lines from code blocks
    - Substitute colored warning/note/etc boxes with native rst ones that sphinx recognizes
    """
    infile = open(infile_name, "r")
    outfile = open(outfile_name, "w")
    skip_section = False
    line_buf = []  # temporary buffer. will read from here instead of file
    # if there are lines here

    def read_next():
        if len(line_buf) == 0:
            return infile.readline()
        else:
            return line_buf.pop(0)

    while True:
        l = read_next()
        if not l:
            break
        if skip_section:
            if is_section_header(l):  # done skipping section (found a new one)
                skip_section = False
                line_buf.append(prevLine)
                line_buf.append(l)
            else:
                prevLine = l
            continue

        if l.lower().startswith("environment setup"):
            # omit this section
            skip_section = True
            header = read_next()  # skip section header
            assert is_section_header(header)
            continue

        if l.lower().startswith("bodo getting started tutorial"):
            # replace this section
            skip_section = True
            header = read_next()  # skip section header
            assert is_section_header(header)
            outfile.write("Getting Started\n")
            outfile.write(header)
            outfile.write(getting_started_intro)
            outfile.write("\n\n")
            continue

        if l.lower().startswith("bodo extended tutorial"):
            # replace this section
            skip_section = True
            header = read_next()  # skip section header
            assert is_section_header(header)
            outfile.write("User Guide\n")
            outfile.write(header)
            outfile.write(user_guide_intro)
            outfile.write("\n\n")
            continue

        if l.startswith(".. raw:: html"):
            l = process_html_block(l, infile, outfile)
            line_buf.append(l)
            continue

        if px_regexp.match(l):
            # remove "%%px --block" lines
            continue

        outfile.write(l)

    infile.close()
    outfile.close()


process(sys.argv[1], sys.argv[2])
