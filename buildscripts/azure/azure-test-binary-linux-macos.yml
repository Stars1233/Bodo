parameters:
  name: ''
  vmImage: ''
  matrix: []
  
jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 360
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps: 
  - task: DownloadBuildArtifacts@0
    inputs:
      artifactName: bodo-inc
      downloadPath: '$(HOME)'
    displayName: 'Download Bodo'
  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(HOME)/bodo-inc/${{ parameters.name }}bodo-inc*.zip'
      destinationFolder: '$(HOME)/bodo-inc/bodo-inc'
    displayName: 'Extract Bodo' 
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'
  - script: |
      if [[ "${{ parameters.name }}" == "Linux" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      fi
      chmod +x miniconda.sh
      ./miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
      conda create -y -n BODOENV
      source activate BODOENV
      conda install -y h5py scipy bodo -c file://$(HOME)/bodo-inc/bodo-inc/ -c bodo.ai -c conda-forge
    displayName: 'Install Bodo from conda'
  - script: |
      cd $HOME/bodo-inc
      mkdir bodo
      mkdir bodo/tests
      if [[ "${{ parameters.name }}" == "Linux" ]]; then
        cp -avr $(System.DefaultWorkingDirectory)/bodo/tests/data bodo/tests/
      else
        cp -r $(System.DefaultWorkingDirectory)/bodo/tests/data bodo/tests/
      fi
    displayName: 'Copy test data'
  - script: |
      buildscripts/setup_minio.sh
    displayName: 'Setup minio'
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y -c conda-forge botocore s3fs
      conda install -y -c conda-forge boto3
    displayName: 'Setup s3_tesing'
  - script: |
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate BODOENV
      pip install pytest pytest-azurepipelines
      cd $HOME/bodo-inc
      mpiexec -n $NP pytest --pyargs bodo -x -s -v -m "$(PYTEST_MARKER) and firsthalf" -W ignore
      mpiexec -n $NP pytest --pyargs bodo -x -s -v -m "$(PYTEST_MARKER) and not firsthalf" -W ignore
    displayName: 'Test Bodo'
