parameters:
  name: ''
  vmImage: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 240
  pool: 
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      buildscripts/setup_conda.sh
      export PATH=$HOME/miniconda3/bin:$PATH
    displayName: 'Setup Miniconda'

  - script: |
      buildscripts/setup_minio.sh
    displayName: 'Setup minio'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y -c conda-forge botocore s3fs
      conda install -y -c conda-forge boto3
    displayName: 'Setup s3_tesing'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y -c conda-forge pymysql sqlalchemy
    displayName: 'Setup MySQL tesing'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      HDF5_DIR=$CONDA_PREFIX python setup.py develop
    displayName: 'Build'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      pip install pytest pytest-azurepipelines pytest-cov codecov
      if [[ "$NP" -eq 1 ]]; then
        if [[ "${{ parameters.name }}" == "Linux" ]]; then
          python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER)" --cov-report= --cov=./ bodo/tests/
        else
          python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER) and s3" bodo/tests/
          python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER) and not s3" bodo/tests/
        fi
      else
        python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER) and s3" bodo/tests/
        python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER) and not s3" bodo/tests/
      fi
    displayName: 'Test'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      if [[ "$NP" -eq 1 ]] && [[ "${{ parameters.name }}" == "Linux" ]]; then
        codecov --required -t $(CODECOV_TOKEN) || (sleep 5 && codecov --required -t $(CODECOV_TOKEN)) || (sleep 5 && codecov --required -t $(CODECOV_TOKEN)) || (sleep 5 && codecov --required -t $(CODECOV_TOKEN)) || (sleep 5 && codecov --required -t $(CODECOV_TOKEN))
      fi
    displayName: 'codecov report upload'
