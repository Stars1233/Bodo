parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  dependsOn: find_suffix
  variables:
    suffix: $[ dependencies.find_suffix.outputs['suffix_step.fileSuffix'] ]
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      pip install astunparse
      chmod +x buildscripts/remove_docstring.py
    displayName: 'Prepare to build'

  - powershell: |
        Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
        Write-Host "##vso[task.prependpath]$HOME/miniconda3/bin"
    displayName: 'Add conda to PATH'

  - script: conda update -q -n base conda
    displayName: 'Update conda'

  - script: |
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - bash: |
      conda create -y -n bodo_build conda-build anaconda-client conda-verify
    displayName: 'Create Conda Env'

  - bash: |
      set -eo pipefail
      source activate bodo_build
      if [[ $OBFUSCATE == 1 ]]; then
        conda install -y astor -c conda-forge
        cd obfuscation
        ./do_obfuscation.py
      else
        echo "Skipping Obfuscation"
      fi
    displayName: 'Obfuscation'

  - bash: |
      set -eo pipefail
      source activate bodo_build
      export BODO_VERSION=`python -c "import versioneer; print(versioneer.get_version())"`
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        cd buildscripts/bodo-numba-dev-conda-recipe/
        echo "Using Numba-Dev Conda Recipe"
      else
        cd buildscripts/bodo-conda-recipe/
      fi
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        conda build . -c numba/label/dev -c conda-forge -c intel --no-test --output-folder ../../
        echo "Using numba/label/dev channel"
      else
        conda build . -c conda-forge -c intel --no-test --output-folder ../../
      fi
    displayName: 'Conda build Bodo'

  - bash: |
      set -eo pipefail
      source activate bodo_build
      mkdir bodo-inc
      mkdir bodo-inc/windows-64
      cp ./win-64/bodo*.tar.bz2 bodo-inc/windows-64/
      conda index bodo-inc/
    displayName: 'index bodo-inc'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/bodo-inc'
      includeRootFolder: false
      archiveFile: '$(Build.ArtifactStagingDirectory)/${{ parameters.name }}-bodo-inc-$(suffix).zip'
      replaceExistingArchive: true
    displayName: "Archive files"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/${{ parameters.name }}-bodo-inc-$(suffix).zip'
      artifactName: bodo-inc
    displayName: "Publish Artifact"
