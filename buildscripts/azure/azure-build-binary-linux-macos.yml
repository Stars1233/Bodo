parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  dependsOn: find_suffix
  variables:
    suffix: $[ dependencies.find_suffix.outputs['suffix_step.fileSuffix'] ]
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      set -eo pipefail
      export BODO_VERSION=`python -c "import versioneer; print(versioneer.get_version())"`
      echo "##vso[task.setvariable variable=BODO_VERSION]$BODO_VERSION"
      echo "BODO_VERSION: $BODO_VERSION"
    displayName: 'Get Bodo Version'

  - script: |
      set -eo pipefail
      pip install astunparse
      chmod +x buildscripts/remove_docstring.py
    displayName: 'Prepare to build'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" = Linux* ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      fi
      chmod +x miniconda.sh
      ./miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
    displayName: 'Setup Miniconda'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "macOS" ]]; then
        buildscripts/setup_osx_sdk.sh
      fi
    displayName: 'Setup OSX SDK'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      conda create -y -n bodo_build conda-build anaconda-client conda-verify
    displayName: 'Create Conda Env'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate bodo_build
      if [[ $OBFUSCATE == 1 ]]; then
        conda install -y astor -c conda-forge
        cd obfuscation
        ./do_obfuscation.py
      else
        echo "Skipping Obfuscation"
      fi
    displayName: 'Obfuscation'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.9}
      export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
      source activate bodo_build
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        cd buildscripts/bodo-numba-dev-conda-recipe/
        echo "Using Numba-Dev Conda Recipe"
      else
        cd buildscripts/bodo-conda-recipe/
      fi
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
        export CHECK_LICENSE_CORE_COUNT="0"
      else
        export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
        export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      fi
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        conda-build . -c numba/label/dev -c conda-forge --no-test
        echo "Using numba/label/dev channel"
      else
        conda-build . -c conda-forge --no-test
      fi
    displayName: 'Conda build Bodo'

  - task: DownloadSecureFile@1
    name: secret_file
    displayName: 'Download secrets file'
    inputs:
      secureFile: 'publish_binary_secrets'

  - script: |
      set -eo pipefail
      echo "BODO_VERSION: $BODO_VERSION"
      sudo chmod a+r $(secret_file.secureFilePath)
      sudo cp $(secret_file.secureFilePath) $HOME/secret_file
      cd $(System.DefaultWorkingDirectory)
      mkdir bodo-inc
      IS_RELEASE=`git tag --points-at HEAD`
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export OBFUSCATE=$(OBFUSCATE)
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
      fi
      artifactory_channel=`./buildscripts/azure/get_channel.sh`
      if [[ "${{ parameters.name }}" = Linux* ]]; then
        artifactory_os_dir="linux-64"
      else
        artifactory_os_dir="osx-64"
      fi
      ./buildscripts/azure/publish_binary.sh $artifactory_channel $artifactory_os_dir $IS_RELEASE $BODO_VERSION

    displayName: 'publish bodo binary to Artifactory'
