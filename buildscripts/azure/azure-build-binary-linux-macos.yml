parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  dependsOn: find_suffix
  variables:
    suffix: $[ dependencies.find_suffix.outputs['suffix_step.fileSuffix'] ]
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      set -eo pipefail
      pip install astunparse
      chmod +x buildscripts/remove_docstring.py
    displayName: 'Prepare to build'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "Linux" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      fi
      chmod +x miniconda.sh
      ./miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
    displayName: 'Setup Miniconda'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "macOS" ]]; then
        buildscripts/setup_osx_sdk.sh
      fi
    displayName: 'Setup OSX SDK'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      conda create -y -n bodo_build conda-build anaconda-client conda-verify
    displayName: 'Create Conda Env'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate bodo_build
      if [[ $OBFUSCATE == 1 ]]; then
        conda install -y astor -c conda-forge
        cd obfuscation
        ./do_obfuscation.py
      else
        echo "Skipping Obfuscation"
      fi
    displayName: 'Obfuscation'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.9}
      export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
      source activate bodo_build
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        cd buildscripts/bodo-numba-dev-conda-recipe/
        echo "Using Numba-Dev Conda Recipe"
      else
        cd buildscripts/bodo-conda-recipe/
      fi
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        conda-build . -c numba/label/dev -c conda-forge --no-test
        echo "Using numba/label/dev channel"
      else
        conda-build . -c conda-forge --no-test
      fi
    displayName: 'Conda build Bodo'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate bodo_build
      cd $(System.DefaultWorkingDirectory)
      mkdir bodo-inc
      if [[ "${{ parameters.name }}" == "Linux" ]]; then
        mkdir bodo-inc/linux-64
        cp $(HOME)/miniconda3/envs/bodo_build/conda-bld/linux-64/bodo*.tar.bz2 bodo-inc/linux-64/
      else
        mkdir bodo-inc/osx-64
        cp $(HOME)/miniconda3/envs/bodo_build/conda-bld/osx-64/bodo*.tar.bz2 bodo-inc/osx-64/
      fi
      conda index bodo-inc/

    displayName: 'index bodo-inc'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(System.DefaultWorkingDirectory)/bodo-inc'
      includeRootFolder: false
      archiveFile: $(Build.ArtifactStagingDirectory)/${{ parameters.name }}-bodo-inc-$(suffix).zip
      replaceExistingArchive: true
    displayName: "Archive files"

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)/${{ parameters.name }}-bodo-inc-$(suffix).zip
      artifactName: bodo-inc
    displayName: "Publish Artifact"
